---
- hosts: localhost
  gather_facts: no

  vars:
    infra_config: "{{ lookup('env', 'INFRA_CONFIG') }}"
    is_properties: "{{ lookup('env', 'PIPELINE_VALUES_FILE') }}"
    rsso_user: "{{ lookup('env', 'RSSO_ADMIN_USER') | default('admin', true) }}"
    rsso_password: "{{ lookup('env', 'RSSO__ADMIN_PASSWORD') | default('RSSO#Admin#', true) }}"
    config_files:
      - '{{ infra_config }}'
      - '{{ is_properties }}'
    vars_list:
      - lb_host
      - cluster_domain
      - customer_service
      - environment_name
      - company_name
      - rsso_user
      - rsso_password
      - is_namespace

  tasks:

    - name: Get values from config files if not set by pipeline
      set_fact:
        lb_host: "{{ lookup('env', 'LB_HOST') | default(lookup('ini', 'LB_HOST type=properties file={{ infra_config }}', errors='ignore'), true) }}"
        cluster_domain: "{{ lookup('env', 'CLUSTER_DOMAIN') | default(lookup('ini', 'CLUSTER_DOMAIN type=properties file={{ is_properties }}', errors='ignore'), true) }}"
        customer_service: "{{ lookup('env', 'CUSTOMER_SERVICE') | default(lookup('ini', 'CUSTOMER_SERVICE type=properties file={{ is_properties }}', errors='ignore'), true) }}"
        environment_name: "{{ lookup('env', 'ENVIRONMENT') | default(lookup('ini', 'ENVIRONMENT type=properties file={{ is_properties }}', errors='ignore'), true) }}"
        company_name: "{{ lookup('env', 'COMPANY_NAME') | default(lookup('ini', 'COMPANY_NAME type=properties file={{ infra_config }}', errors='ignore'), true) }}"
        is_namespace: "{{ lookup('env', 'IS_NAMESPACE') | default(lookup('ini', 'IS_NAMESPACE type=properties file={{ is_properties }}', errors='ignore'), true) }}"
        tenant_name: "{{ lookup('ini', 'TENANT_NAME type=properties file={{ infra_config }}') }}"

    - set_fact:
        company_name: "{{ tenant_name }}"
      when: tenant_name | length > 0

    - debug: msg="{{ lookup('vars', item) }}"
      loop: '{{ vars_list }}'

    - name: Set RSSO variables
      set_fact:
        rsso_url: https://{{ lb_host }}/rsso
        realm_name: "{{ customer_service }}-{{ environment_name }}"
        realm_url: "{{ customer_service if environment_name == 'prod' else customer_service + '-' + environment_name }}"

    - debug:
        msg: "realm_url is {{ realm_url }}"

    - name: Check that RSSO is running and accessible
      uri:
        url: '{{ rsso_url }}'
        validate_certs: false
      register: rsso_response

    - debug: msg="{{ rsso_response }}"

    - name: Get RSSO admin token
      uri:
        url: '{{ rsso_url }}/api/v1.1/admin/login'
        validate_certs: false
        method: POST
        body_format: json
        body: '{"username":"{{ rsso_user }}","password":"{{ rsso_password }}"}'
        return_content: yes
      register: login

    - debug: msg="{{ login.json.admin_token }}"

    - name: Get RSSO tenants
      uri:
        url: '{{ rsso_url }}/api/v1.1/tenant'
        validate_certs: false
        return_content: yes
        headers:
          Authorization: RSSO {{ login.json.admin_token }}
      register: tenants

    - debug: msg="{{ tenants }}"

    - name: Get TENANT_DOMAIN
      set_fact:
        tenant_domain: '{{ item.name }}'
      when: "item.name|regex_search('^' + company_name, ignorecase=True)"
      loop: '{{ tenants.json.tenants }}'

    - debug: msg="TENANT_DOMAIN is {{ tenant_domain }}"

    - name: Update RSSO_URL in {{ pipeline_values_filename }} file
      lineinfile:
        path: '{{ is_properties }}'
        regexp: '^RSSO_URL='
        line: RSSO_URL={{ rsso_url }}

    - name: Update HELIX_PLATFORM_CUSTOMER_NAME in {{ pipeline_values_filename }} file
      lineinfile:
        path: '{{ is_properties }}'
        regexp: '^HELIX_PLATFORM_CUSTOMER_NAME='
        line: HELIX_PLATFORM_CUSTOMER_NAME={{ company_name }}

    - name: Update TENANT_DOMAIN in {{ pipeline_values_filename }} file
      lineinfile:
        path: '{{ is_properties }}'
        regexp: '^TENANT_DOMAIN='
        line: TENANT_DOMAIN={{ tenant_domain }}
        backrefs: yes

    - name: Get RSSO realms
      uri:
        url: '{{ rsso_url }}/api/v1.1/realms'
        validate_certs: false
        return_content: yes
        headers:
          Authorization: RSSO {{ login.json.admin_token }}
      register: realms

    - debug: msg="{{ realms }}"

    - debug: msg="{{ item }}"
      loop: '{{ realms.json.realms }}'

    - name: Fail if realm already exists
      fail:
        msg: "Realm already exists - {{ realm_name }}"
      when: 'item.id == realm_name|string'
      loop: '{{ realms.json.realms }}'

    - name: Create realm
      uri:
        url: '{{ rsso_url }}/api/v1.1/realms'
        validate_certs: false
        method: POST
        headers:
          Authorization: RSSO {{ login.json.admin_token }}
        body_format: json
        body: {
        "domainMapping": {
           "domain": [
             "{{ realm_url }}.{{ cluster_domain }}",
             "{{ realm_url }}-smartit.{{ cluster_domain }}",
             "{{ realm_url }}-sr.{{ cluster_domain }}",
             "{{ realm_url }}-is.{{ cluster_domain }}",
             "{{ realm_url }}-restapi.{{ cluster_domain }}",
             "{{ realm_url }}-atws.{{ cluster_domain }}",
             "{{ realm_url }}-dwp.{{ cluster_domain }}",
             "{{ realm_url }}-dwpcatalog.{{ cluster_domain }}",
             "{{ realm_url }}-vchat.{{ cluster_domain }}",
             "{{ realm_url }}-chat.{{ cluster_domain }}",
             "{{ realm_url }}-int.{{ cluster_domain }}"
           ]
         },
         "tenantDomain": "{{ tenant_domain }}",
         "authChain": {
           "idpSaml": [],
           "idpAr": [
             {
               "cspDomains": {
                 "domain": [
                   ""
                 ]
               },
               "id": "ar",
               "order": 1,
               "arHost": "platform-user-ext.{{ is_namespace }}",
               "arQueue": 0,
               "arPort": 46262,
               "transformationStrategy": "None",
               "customExpression": ""
             }
           ],
           "idpLdap": [],
           "idpCert": [],
           "idpKerberos": [],
           "idpPreauth": [],
           "idpOidc": [],
           "idpLocalUser": []
         },
         "bypassAllowed": false,
         "tenantLogoutURL": "",
         "sessionQuota": 0,
         "forceLogoutOnReachQuota": true,
         "singleLogOut": false,
         "useCaptcha": false,
         "onAuthWebhook": "",
         "tenantName": "{{ realm_name }}"
       }

    - debug: msg="Realm {{ realm_name }} created with TENANT_DOMAIN {{ tenant_domain }} and HELIX_PLATFORM_CUSTOMER_NAME {{ company_name }}"
