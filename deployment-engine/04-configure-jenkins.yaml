---
- hosts: localhost

  tasks:

      # Load variables
    - name: Load default config variables
      include_vars: 00-variables.yaml

    - name: Plugins block
      block:

        - name: Install plugins
          community.general.jenkins_plugin:
           name: "{{ item }}"
           state: present
           url_username: "{{ jenkins_login_user }}"
           url_password: "{{ jenkins_login_user_pwd }}"
          with_lines: cat {{ installer_files_directory }}/plugins.txt

        - name: Restart Jenkins service
          ansible.builtin.service:
            name: jenkins
            state: restarted

        - name: Pause for 15s to allow Jenkins startup
          ansible.builtin.pause:
            seconds: 15

      when: install_jenkins_plugins|bool

    - name: Set numExecutors
      community.general.jenkins_script:
        script: |
          import jenkins.model.*
          Jenkins.instance.setNumExecutors(5)
          instance.save()
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"

    - name: Set Jenkins admin config
      community.general.jenkins_script:
        script: |
          import jenkins.model.Jenkins
          import jenkins.model.JenkinsLocationConfiguration
          def jenkinsParameters = [
            email:  'Jenkins Admin <admin@example.com>',
            url:    'https://${host}:8080/'
          ]
          def jenkinsLocationConfiguration = JenkinsLocationConfiguration.get()
          jenkinsLocationConfiguration.setUrl(jenkinsParameters.url)
          jenkinsLocationConfiguration.setAdminAddress(jenkinsParameters.email)
          jenkinsLocationConfiguration.save()
        args:
          host: "{{ ansible_fqdn }}"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"

    - name: Create UsernamePassword credentials
      community.general.jenkins_script:
        script: |
          import com.cloudbees.plugins.credentials.*
          import com.cloudbees.plugins.credentials.domains.Domain
          import com.cloudbees.plugins.credentials.impl.*
          import hudson.util.Secret
          import jenkins.model.Jenkins
          def jenkinsKeyUsernameWithPasswordParameters = [
            description:  '${description}',
            id:           '${id}',
            userName:     '${username}',
            secret:       '${secret}',
          ]
          Jenkins jenkins = Jenkins.getInstance()
          def domain = Domain.global()
          def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
          def jenkinsKeyUsernameWithPassword = new UsernamePasswordCredentialsImpl(
            CredentialsScope.GLOBAL,
            jenkinsKeyUsernameWithPasswordParameters.id,
            jenkinsKeyUsernameWithPasswordParameters.description,
            jenkinsKeyUsernameWithPasswordParameters.userName,
            jenkinsKeyUsernameWithPasswordParameters.secret
          )
          store.addCredentials(domain, jenkinsKeyUsernameWithPassword)
          jenkins.save()
        args:
          description: "{{ item.description }}"
          id: "{{ item.id }}"
          username: "{{ item.username }}"
          secret: "{{ item.secret }}"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"
      loop:
        - { description: "github", id: "github", username: "{{ git_user }}", secret: "{{ git_user_pwd }}" }
        - { description: "ansible_host", id: "ansible_host", username: "{{ git_user }}", secret: "{{ git_user_pwd }}" }
        - { description: "ansible", id: "ansible", username: "{{ git_user }}", secret: "{{ git_user_pwd }}" }
        - { description: "git", id: "git", username: "{{ git_user }}", secret: "{{ git_user_pwd }}" }

    - name: Create SecretText credentials
      community.general.jenkins_script:
        script: |
          import jenkins.model.Jenkins
          import com.cloudbees.plugins.credentials.domains.Domain
          import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
          import com.cloudbees.plugins.credentials.CredentialsScope
          import hudson.util.Secret
          instance = Jenkins.instance
          domain = Domain.global()
          store = instance.getExtensionList(
            "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()
          secretText = new StringCredentialsImpl(
            CredentialsScope.GLOBAL,
            "${id}",
            "${description}",
            Secret.fromString("")
          )
          store.addCredentials(domain, secretText)
          StringCredentialsImpl
          jenkins.save()
        args:
          description: "{{ item.description }}"
          id: "{{ item.id }}"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"
      loop:
        - { description: "password_vault_apikey", id: "password_vault_apikey" }

    - name: Create SecretFile credentials
      community.general.jenkins_script:
        script: |
          import jenkins.model.*
          import com.cloudbees.plugins.credentials.*
          import com.cloudbees.plugins.credentials.impl.*
          import com.cloudbees.plugins.credentials.domains.*
          import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
          import org.jenkinsci.plugins.plaincredentials.StringCredentials
          import org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl
          instance = Jenkins.instance
          domain = Domain.global()
          store = instance.getExtensionList("com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()
          file_content = '''
          ${filecontents}
          '''
          bytes = SecretBytes.fromBytes(file_content.getBytes())
          file_secret = new FileCredentialsImpl(CredentialsScope.GLOBAL, "${id}", "", "${secretfilename}", bytes)
          store.addCredentials(domain, file_secret)
          jenkins.save()
        args:
          id: "{{ item.id }}"
          secretfilename: "{{ item.secretfilename }}"
          filecontents: "{{ item.filecontents }}"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"
      loop:
        - { id: "kubeconfig", secretfilename: "kubeconfig", filecontents: "{{ lookup('file', '{{ installer_files_directory }}/kubeconfig') }}" }
        - { id: "TOKENS", secretfilename: "tokens.json", filecontents: "" }

    - name: Create Libraries
      community.general.jenkins_script:
        script: |
          import jenkins.model.*
          import jenkins.plugins.git.GitSCMSource
          import org.jenkinsci.plugins.workflow.libs.*
          def libraryName = "${name}"
          def jenkins = Jenkins.instance
          def globalLibraries = jenkins.getDescriptorByType(GlobalLibraries.class)
          def existingLibrary = globalLibraries.libraries.find { it.name == libraryName }
          if (existingLibrary) {
              println "Library already exists."
          } else {
              def scmSource = new GitSCMSource("${repourl}")
              scmSource.credentialsId = ""
              def libraryConfiguration = new LibraryConfiguration(libraryName, new SCMSourceRetriever(scmSource))
              libraryConfiguration.setDefaultVersion("master")
              libraryConfiguration.setImplicit(${implicit})
              globalLibraries.libraries += libraryConfiguration
              jenkins.save()
          }
        args:
          repourl: "{{ item.repourl }}"
          name: "{{ item.name }}"
          implicit: "{{ item.implicit }}"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"
      loop:
        - { name: "pipeline-framework", repourl: "ssh://{{ git_user }}@{{ ansible_fqdn }}/home/{{ git_user }}/{{ git_repo_dir }}/LIBRARY_REPO/pipeline-framework/pipeline-framework.git", implicit: "false" }
        - { name: "JENKINS-27413-workaround-library", repourl: "ssh://{{ git_user }}@{{ ansible_fqdn }}/home/{{ git_user }}/{{ git_repo_dir }}/LIBRARY_REPO/jenkins-workaround/JENKINS-27413-workaround-library.git", implicit: "true" }

    - name: Approve scripts
      community.general.jenkins_script:
        script: |
          import java.lang.reflect.*;
          import jenkins.model.Jenkins;
          import jenkins.model.*;
          import org.jenkinsci.plugins.scriptsecurity.scripts.*;
          import org.jenkinsci.plugins.scriptsecurity.sandbox.whitelists.*;
          scriptApproval = ScriptApproval.get()
          alreadyApproved = new HashSet<>(Arrays.asList(scriptApproval.getApprovedSignatures()))
          approveSignature('method org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper getRawBuild')
          approveSignature('method hudson.model.Run getLog')
          scriptApproval.save()
          void approveSignature(String signature) {
              if (!alreadyApproved.contains(signature)) {
                 scriptApproval.approveSignature(signature)
              }
          }
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"

    - name: Add nodes
      community.general.jenkins_script:
        script: |
          import jenkins.model.Jenkins
          import hudson.slaves.DumbSlave
          import hudson.slaves.SlaveComputer
          import hudson.slaves.RetentionStrategy
          import hudson.plugins.sshslaves.SSHLauncher
          import hudson.plugins.sshslaves.verifiers.NonVerifyingKeyVerificationStrategy
          def nodeName = "${nodename}"
          def remoteFS = "${remotefs}"
          def numExecutors = 3
          def labelString = "${label}"
          def host = "${host}"
          def sshPort = 22
          def credentialsId = "${credentials}"
          def jvmOptions = ''
          def javaPath = ''
          def prefixStartSlaveCmd = ''
          def suffixStartSlaveCmd = ''
          def launchTimeoutSeconds = 60
          def maxNumRetries = 3
          def retryWaitTime = 10
          def strategy = new NonVerifyingKeyVerificationStrategy()
          def launcher = new SSHLauncher(
              host, sshPort, credentialsId, jvmOptions, javaPath,
              prefixStartSlaveCmd, suffixStartSlaveCmd, launchTimeoutSeconds,
              maxNumRetries, retryWaitTime, strategy
          )
          def node = new DumbSlave(
              nodeName, "Jenkins SSH Node", remoteFS, numExecutors.toString(),
              Node.Mode.NORMAL, labelString, launcher, new RetentionStrategy.Always(), new LinkedList()
          )
          def jenkins = Jenkins.instance
          if (jenkins.getNode(nodeName) == null) {
              jenkins.addNode(node)
          }
        args:
          nodename: "{{ item.nodename }}"
          remotefs: "{{ item.remotefs }}"
          host: "{{ item.host }}"
          credentials: "{{ item.credentials }}"
          label: "{{ item.label }}"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"
      loop:
        - { nodename: "{{ ansible_fqdn }}", remotefs: "/home/{{ git_user }}/workspace", host: "{{ ansible_fqdn }}", credentials: "ansible_host", label: "ansible-master" }
        - { nodename: "git-{{ ansible_fqdn }}", remotefs: "/home/{{ git_user }}/workspace", host: "{{ ansible_fqdn }}", credentials: "git", label: "git-{{ ansible_fqdn }}" }

    - name: Add Helix jobs
      community.general.jenkins_script:
        script: |
          import hudson.plugins.git.*;
          def scm = new GitSCM("${repourl}")
          scm.branches = [new BranchSpec("*/master")];
          def flowDefinition = new org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition(scm, "${scriptpath}")
          def parent = Jenkins.instance
          def job = new org.jenkinsci.plugins.workflow.job.WorkflowJob(parent, "${name}")
          job.definition = flowDefinition
          parent.reload()
        args:
          repourl: "ssh://{{ git_user }}@{{ ansible_fqdn }}/home/{{ git_user }}/{{git_repo_dir}}/{{ item.repo | default('ITSM_REPO/itsm-on-premise-installer.git', true) }}"
          name: "{{ item.name }}"
          scriptpath: "{{ item.scriptpath | default('pipeline/jenkinsfile', true) }}/{{ item.jenkinsfile }}.jenkinsfile"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"
      loop: "{{ pipeline_jobs }}"

    - name: Add dry run job
      community.general.jenkins_script:
        script: |
          import jenkins.model.*
          import org.jenkinsci.plugins.workflow.job.*
          String jobName = '01 - Dry run build of all Helix deployment pipelines'
          String pipelineScript = '''
          ${scripttext}
          '''
          Jenkins jenkins = Jenkins.instance
          WorkflowJob job = jenkins.createProject(WorkflowJob, jobName)
          job.definition = new org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition(pipelineScript, true)
          job.save()
        args:
          scripttext: "{% for key in pipeline_jobs %}build propagate: false, job: '{{ key.name }}'\n{% endfor %}"
        user: "{{ jenkins_login_user }}"
        password: "{{ jenkins_login_user_pwd }}"

    - name: Start dry run block
      block:

        - name: Install python-jenkins package
          ansible.builtin.pip:
            name: python-jenkins

        - name: Start the dry run job
          community.general.jenkins_build:
            name: "01 - Dry run build of all Helix deployment pipelines"
            state: present
            detach: true
            user: "{{ jenkins_login_user }}"
            password: "{{ jenkins_login_user_pwd }}"

      when: start_dry_run|bool
